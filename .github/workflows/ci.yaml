name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write # Required to push/pull from GHCR

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/process-command
          tags: |
            type=raw,value=test

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: test
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  lint:
    needs: build
    strategy:
      matrix:
        tool: [cpp, python]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull test image
        run: docker pull ghcr.io/${{ github.repository }}/process-command:test

      - name: Run C++ linter
        if: matrix.tool == 'cpp'
        run: docker run --rm ghcr.io/${{ github.repository }}/process-command:test make -C build check-format

      - name: Run Python linter
        if: matrix.tool == 'python'
        run: docker run --rm ghcr.io/${{ github.repository }}/process-command:test flake8 python/ --count --show-source --statistics

  test:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        suite: [cpp, python]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull test image
        run: docker pull ghcr.io/${{ github.repository }}/process-command:test

      # ---------- C++ ----------
      - name: C++ tests & coverage
        if: matrix.suite == 'cpp'
        run: |
          mkdir -p coverage-cpp
          docker run --rm -v "$PWD/coverage-cpp:/cov" -u$(id -u):$(id -g) ghcr.io/${{ github.repository }}/process-command:test \
            bash -c '
              set -e
              cmake -B build -S . -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage"
              cmake --build build -j$(nproc)
              ctest --test-dir build -V
              gcovr -r . --filter src/ --xml -o /cov/coverage.xml --html-details -o /cov/index.html'

      - name: Upload C++ coverage → Codecov
        if: matrix.suite == 'cpp'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage-cpp/coverage.xml
          flags: cpp
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload C++ coverage folder (artifact)
        if: matrix.suite == 'cpp'
        uses: actions/upload-artifact@v4
        with:
          name: cpp-coverage
          path: coverage-cpp

      # ---------- Python ----------
      - name: Python tests & coverage
        if: matrix.suite == 'python'
        run: |
          mkdir -p test-reports
          docker run --rm -v "$PWD/test-reports:/reports" -u$(id -u):$(id -g) ghcr.io/${{ github.repository }}/process-command:test \
            bash -c '
              set -e
              python3 -m coverage run -m pytest python/tests --junitxml=/reports/junit.xml
              python3 -m coverage xml  -o /reports/coverage.xml
              python3 -m coverage html -d /reports/htmlcov'

      - name: Upload Python coverage → Codecov
        if: matrix.suite == 'python'
        uses: codecov/codecov-action@v4
        with:
          file: ./test-reports/coverage.xml
          flags: python
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload Python test-reports folder (artifact)
        if: matrix.suite == 'python'
        uses: actions/upload-artifact@v4
        with:
          name: python-test-results
          path: test-reports

  example:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull test image
        run: docker pull ghcr.io/${{ github.repository }}/process-command:test

      - name: Run example
        run: docker run --rm ghcr.io/${{ github.repository }}/process-command:test
