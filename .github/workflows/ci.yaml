name: Build_Format_and_Tests

on:
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize]
  push:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Prepare local cache dir (if not restored)
        run: mkdir -p /tmp/.buildx-cache

      - name: Build Docker image with Buildx
        run: |
          docker buildx build \
            --tag process-command:test \
            --file Dockerfile \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            --output type=docker \
            .

      - name: Run C++ code linting
        run: |
          docker run --rm process-command:test \
            bash -c "cd /app/build && cmake --build . --target check-format"

      - name: Run Python code linting
        run: |
          docker run --rm process-command:test \
            flake8 python/ --count --show-source --statistics

      - name: Generate C++ coverage
        run: |
          mkdir -p coverage-cpp
          sudo chown 1000:1000 coverage-cpp
          docker run --rm \
            -v $(pwd)/coverage-cpp:/coverage \
            process-command:test \
            bash -lc "
              cd /app
              mkdir -p build &&             
              cd build &&
              cmake -S /app -B . \
              -DCMAKE_BUILD_TYPE=Debug \
              -DCMAKE_CXX_FLAGS='--coverage' \
              -DCMAKE_EXE_LINKER_FLAGS='--coverage' &&
              make && 
              ctest -V &&
              # Generate coverage excluding third-party and CMake artifacts
              gcovr -r /app \
                --filter '/app/src' \
                --exclude 'build/_deps' \
                --exclude 'build/CMakeFiles' \
                --xml -o /coverage/coverage.xml &&
              gcovr -r /app \
                --filter '/app/src' \
                --exclude 'build/_deps' \
                --exclude 'build/CMakeFiles' \
                --html --html-details -o /coverage/index.html
            "

      - name: Upload C++ coverage
        uses: actions/upload-artifact@v4
        with:
          name: cpp-coverage
          path: coverage-cpp

      - name: Set up Python test reports directory
        run: |
          mkdir -p test-reports
          sudo chown 1000:1000 test-reports
      - name: Run Python tests
        run: |
          docker run --rm \
            -v "$(pwd)/test-reports:/app/test-reports" \
            process-command:test \
            bash -c 'set -e; \
              python3 -m coverage run -m pytest python/tests --junitxml=/app/test-reports/test-results.xml; \
              python3 -m coverage xml -o /app/test-reports/coverage.xml; \
              python3 -m coverage html -d /app/test-reports/htmlcov;'

      - name: Upload Python test results
        uses: actions/upload-artifact@v4
        with:
          name: python-test-results
          path: |
            test-reports/test-results.xml
            test-reports/coverage.xml
            test-reports/htmlcov/

      - name: Run Python example
        run: |
          docker run --rm process-command:test
